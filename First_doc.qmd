---
title: "First_doc"
format: html
editor: visual
---

Lagt inn slik at tidyverse ligger inne konstant:

```{r}
#| label: setup

library(tidyverse)

```

## Quarto

Quarto enables you to weave together content and executable code into a finished document.
To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code.
You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
#| echo: false
#| label: fig-first_plot
#| fig-cap: 'Første plot'
#| fig-cap-location: margin
plot(cars)
```

mitt første plot vist i @fig-first_plot

## Litt klassisk R

```{r}
2+2
x <- 2
```

```{r}
(2/15)^0.25*exp(4) - 200

```

t1 \<1

```{r}
X <- numeric(1000000)
set.seed(666)
```

```{r}
set.seed(666)
x <- rnorm(1000000)

```

```{r}
x <- x[1:10]
q <- x < 0
```

```{r}
x

```

```{r}
q
```

Hvordan finne hvor mange negative verdier i x?

```{r}
sum(q)
```

```{r}
temp <- c(11, 17, 22, 15, 15, 25)
weather <- c("Rainy", "Sunny", "Sunny", "Fair", "Fair", "Sunny") 
```

```{r}
temp
```

```{r}
weather
```

```{r}
names(temp) <- weather
```

```{r}
temp
```

```{r}
temp <- c(11, 17, 22, 15, 15, 25)
weather <- c("Rainy", "Sunny", "Fair") 
```

```{r}

```

```{r}
names(temp) <- weather
```

```{r}
# some codeing of sex, 1 female, 2 male
sex <- c(1, 2, 1, 2, 2, 1, 2)
```

```{r}
# new labels, "F" for 1 and "M" for 2
sex_f <- factor(sex, labels = c("F", "M"))
```

```{r}
sex_f
```

```{r}
table(sex_f)
```

Torsdag 24.08.23

```{r}
df <- data.frame(x = 1:3, y = letters[1:3], z = LETTERS[1:3])
```

```{r}
df1 <- data.frame(x = 1:3, y = letters[1:3], 
                 z = df)
```

Velg kollonne 2

```{r}
# all rows, col 2
df[,2]
```

Velg kollonne 1 og 3

```{r}
# col 1 and 3
df[, c(1,3)]
```

Velg ut kollonne 2 med navn; "y"

```{r}
# col 2 by name
df[, "y"]
```

Velg ut kollonne 1 og 3 med navn "x" og "z"

```{r}
df[, c("x", "z")]
```

Velg rad 1:

```{r}

df[1,]
```

Velg rad 1 og 3:

```{r}

df[c(1, 3),]
```

Velg rad 2 og kollone 3:

```{r}
df[2, 3]
```

```{r}
tib <- as_tibble(df)
```

Subsets:

```{r}
dim(cars)
```

Regresjon:

```{r}
lm1 <- lm(formula = dist ~ speed, data = cars)
```

```{r}
# Note! -1 at end of formula
lm2 <- lm(formula = dist ~ speed -1, data = cars)

```

```{r}
# only on a subset of data
lm3 <- lm(formula = dist ~ speed, 
          data = cars, 
          subset = cars$speed > 6 & cars$speed < 11
         
           )
```

```{r}
huxreg(
        lm1, lm2, lm3,
        error_format = "({statistic})", 
        note         = "{stars}. T statistics in parentheses."
      )
```

Fredag 25.08.23

```{r}
plot(cars)
```

#### Valg av x og y akse, første man skriver blir x akse, eks; cars\$dist og andre man skriver blir y akse eks;cars\$speed:

```{r}
plot(x = cars$dist, y = cars$speed)
```

Regresjonslinje;

```{r}
plot(cars)
abline(lm(formula = dist ~ speed, data = cars))
```

```{r}
# multiple regression
# LifeCycleSavings from package Datasets
mreg1 <- lm(
  formula = sr ~ pop15 + pop75 + dpi + ddpi, 
  data = LifeCycleSavings
  )

```

```{r}
summary(mreg1)
```

Egne funksjoner i "R":

```{r}
add_numbers <- function(x, y) {x + y}
```

add_numbers(2,2) --\> 2+2=4

```{r}
add_numbers <- function(x, y) { paste("summen er lik", x + y, sep = " ") }
```

```{r}
add_numbers(2,2)
```

```{r}
add_numbers <- function(x = 0, y = 0) { paste("summen er lik", x + y, sep = " ") }
```

```{r}
add_numbers(3, 5)
```

```{r}
start_stupid_fun <- function(x1 = 0, n = 10) {
# initialise x
x = vector(mode = "numeric", length = n)
x[1] = x1

for (i in seq_along(x[-1])) {
  x[i + 1] = x[i] + 1
}
x
}


```

```{r}
start_stupid_fun()
```

Velg hvilke tall man starter på og hvor mange tall;

```{r}
start_stupid_fun(x1 = 3, n = 93)
```

Velg et tall i en vektor:

```{r}
start_stupid_fun(x1 = 3, n = 93)[27]
```

```{r}
# probably from jørn
stupid_fun <- function(
    x1 = 0, 
    n = 10, 
    d = 1, # how much to increase number
    w = 80, # text width in chacters
    width_fraction = 1, # how wide should the output be
    print_to_console = TRUE # where to send the output
    ) {
  # we stop if we are to produce zero numbers
  # stopifnot(n > 0) an alternative but throws an error
  # and stop compilation of the document/presentation
  if(!n > 0) return("n needs to be positive.")
  # max number of digits in numbers
  dig =  nchar(n*d)
  # width in number of charcter for output
  w_out = w * width_fraction
  # allocate a numeric vector with room for n numbers
  x = vector(mode = "numeric", length = n)
  # First number in output vector is x1
  x[1] = x1
  # we loop through x vector but drop first element
  for (i in seq_along(x[-1])) {
    # i starts at 1, so first is x1 + d
    x[i + 1] = x[i] + d
    }

# nice trick to control print to console
if (print_to_console) {
print(stringr::str_pad(x, width = dig, side = "left", pad = " "),
      width = w_out)
  } else {
    tibble(x)
  }
}
```

```{r}
stupid_fun()
```

```{r}
stupid_fun(x1 = 0, n = 30, d = 2, print_to_console = TRUE)
```

Funksjon; head_and_tail

```{r}
head_and_tail <- function(x) {
  c(head(x), tail(x))
}
```

```{r}
head_and_tail(mtcars[, 1:6])
```

```{r}
head_and_tail(cars)
```

Utvidet funksjon:

```{r}
head_and_tail <- function(x, n=3L) {
res = rbind(rep('Head',length(names(x))),
        head(x, n = n),
        rep('*-*-*',length(names(x))), 
        rep('Tail',length(names(x))), 
        tail(x, n = n)
        )
as_tibble(res)
}
```

```{r}
head_and_tail(mtcars[, 1:6], n = 3)
```

```{r}
head_and_tail(cars) 
```
